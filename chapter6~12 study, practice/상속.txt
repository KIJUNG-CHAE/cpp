상속

상속하는 객체가 생성되면 메모리공간할당-> base클래스의 생성자실행->derived 클래스의 생성자 실행
이렇게 생성된 생성자는 주소 위치가 같다.소멸은 역순. 
derived객체를 생성할때 derived생성자에서 base생성자로 인자를넘겨주지않으면
base의 디폴트생성자를 이용하여 derived의 객체를 생성한다.
자식클래스의 객체에서 부모의 멤버변수를 사용하여 초기화가 필요할때
멤버이니셜라이저를 이용한다
protected멤버 상속관계에 놓여있을경우 접근을 허용
메인함수에서 접근은 불가능
자식함수에서 get함수같은 매개를 쓰지않고 변수명으로 접근가능

public 상속할 때 원칙
is-a관계
a는 b이다 a->b상속 b가 부모클래스 a자식클래스
has-a관계
a는 b를 소유한다 a->b상속 b가 부모클래스 a자식클래스
객체멤버, 객체포인터에 의한 포함관계형성
1.  class Police{
	Cudgel cud;
2.  class Police{
	Cudgel *cud;//멤버변수로 다른객체를 가지고(주소를 가지고있어도)있는 경우도 헤즈어 관계이 다  외관상 상속은 아니지만. 
		    //perment department도 헤즈어 상속관계이다 
     public:
	Police(){
		cout<<"Police()호출 : "<<this<<endl;	
		cud = new Cudgel();
	}
객체 포인터 
객체의 주소 값을 저장할 수 있는 포인터
base클래스의 포인터는 base객체뿐아니라 derived객체의 주소값도 저장가능
derived객체를 base포인터 변수에 저장하면 base의 객체로 인식을한다!
base의 객체인지derived의 객체인지 런타임에서 알수있어서 컴파일에러발생

상속과 객체와 객체포인터의 관계
부모 클래스의 포인터는 부모클래스객체뿐아니라 자식클래스의 객체의 주소값도
저장가능, 반대로 자식클래스의 객체는 부모클래스의 객체가 될수있다!!
결국 같은 의미. 

다형성의 예: 하나의 기본클래스의 employee객체 pointer을 이용하여 파생클래스 객체perment와
tempory를 다 접근 가능하게 만듦

derived클래스 객체생성 base클래스 레퍼런스변수와 같다고 하면 이것역시 base클래스 객체로 인식

오버라이딩의 이해
base 클래스에 선언된 멤버와 같은 형태의 멤버를 dericed클래스에서 선언
베이스 클래스의 멤버를 가리는 효과
보는 시야(pointer)에따라서 달라지는 효과
check 포인터객체가아닌 객체에서 베이스클래스의 함수를 실행하지않고 드라이브의 형태가같은 함수를
실행한다. 그러면 포인터 객체라면?

>>멤버함수를 virtual(가상)으로 선언
파생 클래스의 객체를 부모 클래스의 객체 포인터에 저장했을 때 파생 클래스의 함수를 실행되게
하려면 부모클래스 함수를 virtual 로 만들면 된다.
virtual의 특성도 상속이된다
상속이 여러번있는 클래스 ex)할아버지 - 아버지 - 나 할아버지 클래스에서 virtual을 선언하면
아버지 클래스도 자동으로 virtual이 선언된다.
객체의 함수를 찾아간다
보이는것이아닌 실체를 찾아가는 꼴.

>>>>>다형성
하나의 문장이 다른함수를 호출하는것.(함수의 오버라이딩을 이용한것)
다른형태의 객체가 같은것으로 취급되는것. (하나의 포인터 객체클래스에 다른클래스의 객체들을 만들면 가능)

virtual를 확인하면 클래스를 뒤져 맞는 함수를 찾아서 실행시킴 컴파일할땐모름 런타임일때 
다이나믹 바인딩 
virtual가없는 함수 오버라이딩을 사용했을때 포인터가아닌 객체만사용>>컴파일일때 결정
스태틱바인딩

오버라이딩 된 함수의 호출이필요한 경우
base포인터 = derived객체 상황,
함수에 baseclassname::functionname()이나 (base포인터객체)->baseclassname::functionname()

오버라이딩++
int main(void)
{
	BBB* b=new BBB;
	b->fct();
	b->fct2()

	AAA* a=b;
	a->fct();

	delete b;
	return 0;
}
실행화면: 
BBB의 fct()
AAA의 fct2()
AAA의 fct()
객체포인터 오버라이딩(가상x)
객체포인터에 해당하는 클래스를 먼저살핀뒤 없으면 부모클래스를 봄
>>실행화면의  fct2()를 보면알수있다.


순수가상함수와 추상 클래스
virtual int getPay()=0;
추상클래스 : 순수 가상 함수 지니는 클래스
추상클래스는 객체화 될 수없다 객체의 포인터를 는 가능? employee 같은것.
부모클래스에 순수가상함수를 만들어 다형성있게 이용가능.

가상소멸자
base포인터 = derived객체상황,
포인터객체를 만들고 소멸시 생성자가 자동으로 실행되지만
소멸할때는 베이스포인터의 delete를 사용할 경우 derived의 객체는 소멸되지않기때문에
소멸자에도 virtual을 사용해줘야한다.
>>드라이브객체포인터를 소멸시키면 드라이브클래스의 객체를 소멸시킨뒤 
이어서 베이스클래스의 객체도 소멸된다
>>베이스객체포인터를 소멸시키면 베이스클래스의 객체만 소멸되어 메모리
누수발생


